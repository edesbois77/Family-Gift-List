generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  giftLists     GiftList[]
  reservations  Reservation[]
  listAccess    ListAccess[]

  @@map("users")
}

model GiftList {
  id          String   @id @default(cuid())
  title       String
  description String?
  shareCode   String   @unique @default(cuid())
  isPublic    Boolean  @default(false)
  eventDate   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  gifts       Gift[]
  reservations Reservation[]
  listAccess  ListAccess[]

  @@map("gift_lists")
}

model Gift {
  id          String  @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  productUrl  String?
  price       Float?
  deliveryCost Float?
  size        String?
  quantity    Int     @default(1)
  priority    Int     @default(3) // 1-5 scale, 5 being highest priority
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  giftListId   String
  giftList     GiftList      @relation(fields: [giftListId], references: [id], onDelete: Cascade)
  reservations Reservation[]

  @@map("gifts")
}

model Reservation {
  id         String   @id @default(cuid())
  quantity   Int      @default(1)
  isPurchased Boolean @default(false)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  giftId     String
  gift       Gift     @relation(fields: [giftId], references: [id], onDelete: Cascade)
  giftListId String
  giftList   GiftList @relation(fields: [giftListId], references: [id], onDelete: Cascade)

  @@unique([userId, giftId])
  @@map("reservations")
}

model ListAccess {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  giftListId String
  giftList   GiftList @relation(fields: [giftListId], references: [id], onDelete: Cascade)

  @@unique([userId, giftListId])
  @@map("list_access")
}